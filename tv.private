/***-*-C-*-******************** PRIVATE! */
/******************************* YOU SHOULD NOT EVEN INCLUDE THIS FILE! */

#ifndef _TV_SNEAKY_ON_
#error DO NOT INCLUDE THIS FILE!
#endif

#define SCOPE	if(1)
#define END_SCOPE

#ifndef TV_PLANT_KEY
#define TV_PLANT_KEY(k)
#endif

#ifndef TV_UPROOT_KEY
#define TV_UPROOT_KEY(k)
#endif

#define TnFILL(tn)	(tn)->tn_fill
#define TnEMPTY(tn)	(TnFILL(tn)==0)
#define TnDAT(tn,xx)	(tn)->tn_data[xx]
#define TnSUBl(tn,xx)	(tn)->tn_sub[xx]
#define TnFREEl(tn,xx) \
	STMT_START { FREE_TN(TnSUBl(tn,xx)); TnSUBl(tn,xx)=0; } STMT_END
#define TnSUBr(tn,xx)	(tn)->tn_sub[xx+1]
#define TnFREEr(tn,xx) \
	STMT_START { FREE_TN(TnSUBr(tn,xx)); TnSUBr(tn,xx)=0; } STMT_END

#ifdef TV_CACHE_TREEFILL
#define TnTREEFILL_inc(tn,d)	(tn)->tn_treefill += (d)
#define TnTREEFILL_set(tn,to)	(tn)->tn_treefill = (to)
#else
#define TnTREEFILL_inc(tn,d)
#define TnTREEFILL_set(tn,to)
#endif

#if defined(TV_KEYD)
#define TnKEY(tn,xx)		(tn)->tn_key[xx]
#define TnKEY_set(tn,xx,to)	(tn)->tn_key[xx] = to
#define TnSETSLOT(tn,xx,k,d,l,r) \
	STMT_START { \
	  TnKEY_set(tn,xx,k); TnDAT(tn,xx)=d; TnSUBl(tn,xx)=l; TnSUBr(tn,xx)=r; \
	} STMT_END
#define TnCOPYSLOT(sn,sx,dn,dx) \
	STMT_START { \
	  TnKEY(dn,dx) = TnKEY(sn,sx); TnDAT(dn,dx) = TnDAT(sn,sx); \
	} STMT_END
#define TnSETSLOTl(tn,xx,k,d,s)	\
	STMT_START { TnKEY_set(tn,xx,k); TnDAT(tn,xx)=d; TnSUBl(tn,xx)=s; } STMT_END
#define TnCOPYSLOTl(sn,sx,dn,dx) \
	TnSETSLOTl(dn,dx, TnKEY(sn,sx),TnDAT(sn,sx),TnSUBl(sn,sx))
#define TnSETSLOTr(tn,xx,k,d,s)	\
	STMT_START { TnKEY(tn,xx)=k; TnDAT(tn,xx)=d; TnSUBr(tn,xx)=s; } STMT_END
#define TnCOPYSLOTr(sn,sx,dn,dx) \
	TnSETSLOTr(dn,dx, TnKEY(sn,sx),TnDAT(sn,sx),TnSUBr(sn,sx))
#define TV_SETREMOTE(tc,key)	tc_seek(tc,key)
#else
#define TnKEY_T			I32
#define TV_KEYCMP(asc,a,b) \
	(asc? a-b : b-a)
#define TnKEY(tn,xx)		xx
#define TnKEY_set(tn,xx,to)
#define TnSETSLOT(tn,xx,k,d,l,r) \
	STMT_START { \
	  TnDAT(tn,xx)=d; TnSUBl(tn,xx)=l; TnSUBr(tn,xx)=r; \
	} STMT_END
#define TnCOPYSLOT(sn,sx,dn,dx) \
	TnDAT(dn,dx) = TnDAT(sn,sx)
#define TnSETSLOTl(tn,xx,k,d,s)	\
	STMT_START { TnDAT(tn,xx)=d; TnSUBl(tn,xx)=s; } STMT_END
#define TnCOPYSLOTl(sn,sx,dn,dx) \
	TnSETSLOTl(dn,dx, FAKE,TnDAT(sn,sx),TnSUBl(sn,sx))
#define TnSETSLOTr(tn,xx,k,d,s)	\
	STMT_START { TnDAT(tn,xx)=d; TnSUBr(tn,xx)=s; } STMT_END
#define TnCOPYSLOTr(sn,sx,dn,dx) \
	TnSETSLOTr(dn,dx, FAKE,TnDAT(sn,sx),TnSUBr(sn,sx))
#define TV_SETREMOTE(tc,key)	tc_moveto(tc,key)
#endif

#ifdef TV_CACHE_TREEFILL
#define TvFILL_inc(tv,d)
#define TvFILL_set(tv,to)
#else
#define TvFILL_inc(tv,d)	(tv)->xtv_fill += (d)
#define TvFILL_set(tv,to)	(tv)->xtv_fill = to
#endif
#define TvEMPTY(tv)		(TvFILL(tv)==0)
#define TvFREEROOT(tv) \
	STMT_START { FREE_TN(TvROOT(tv)); TvROOT(tv)=0; } STMT_END
#define TvVERSION(tv)		(tv)->xtv_version
#if defined(TV_TEST)
#define TvFLAGS(tv)		(tv)->xtv_flags
#define TVptv_ASCENDING		0x00000001
#endif
#define TvASCENDING(tv)		(TvFLAGS(tv) & TVptv_ASCENDING)
#define TvASCENDING_on(tv)	(TvFLAGS(tv) |= TVptv_ASCENDING)
#define TvASCENDING_off(tv)	(TvFLAGS(tv) &= ~TVptv_ASCENDING)

#define TcVERSION(tc)		(tc)->xtc_version
#define TcSYNCCHECK(tc) \
	if (TcVERSION(tc) != TvVERSION(TcTV(tc))) \
	  TV_PANIC("TV: cursor(0x%p) out of sync with tree(0x%p)", tc,TcTV(tc));
#define TcPATH(tc)		(tc)->xtc_path
#define TcFILL(tc)		(tc)->xtc_fill
#define TcMAX(tc)		(tc)->xtc_max
#if defined(TV_CACHE_TREEFILL)
#define TcADJUST_TREEFILL(tc,d)	tc_adjust_treefill(tc,d)
#define TcPOS(tc)		(tc)->xtc_pos
#define TcPOSx(tc)		(tc)->xtc_pos
#define TcPOS_set(tc,to)	(tc)->xtc_pos = (to)
#define TcPOS_inc(tc,d)		(tc)->xtc_pos += (d)
#else
#define TcADJUST_TREEFILL(tc,d)
#define TcPOS(tc)
#define TcPOSx(tc)		(-1)
#define TcPOS_set(tc,to)
#define TcPOS_inc(tc,d)
#endif
#define TcPUSH(tc,tn) \
	STMT_START { \
	  TCE *_ce; \
	  if (TcFILL(tc)+1 > TcMAX(tc)) tc_extend(tc); \
	  TcFILL(tc)+=1; \
	  _ce = TcCEx(tc); \
	  CeTN(_ce) = tn; \
	  CeFLAGS(_ce) = 0; \
	} STMT_END
#define TcPOP(tc)		TcTN(tc,--TcFILL(tc))
#define TcTN(tc,xx)		(tc)->xtc_path[xx].tce_tn
#define TcTNx(tc)		(tc)->xtc_path[TcFILL(tc)-1].tce_tn
#define TcSLOT(tc,xx)		(tc)->xtc_path[xx].tce_slot
#define TcSLOTx(tc)		(tc)->xtc_path[TcFILL(tc)-1].tce_slot
#define TcCE(tc,xx)		(&(tc)->xtc_path[xx])
#define TcCEx(tc)		(&(tc)->xtc_path[TcFILL(tc)-1])
#define CeTN(ce)		(ce)->tce_tn
#define CeSLOT(ce)		(ce)->tce_slot
#define CeFLAGS(ce)		(ce)->tce_flags

#define CEptv_LEFT		0x0001
#define CEptv_RIGHT		0x0002
#define CeLEFT(ce)		(CeFLAGS(ce) & CEptv_LEFT)
#define CeLEFT_on(ce)		(CeFLAGS(ce) |= CEptv_LEFT)
#define CeLEFT_off(ce)		(CeFLAGS(ce) &= ~CEptv_LEFT)
#define CeRIGHT(ce)		(CeFLAGS(ce) & CEptv_RIGHT)
#define CeRIGHT_on(ce)		(CeFLAGS(ce) |= CEptv_RIGHT)
#define CeRIGHT_off(ce)		(CeFLAGS(ce) &= ~CEptv_RIGHT)

#if defined(TV_TEST)
#define TcFLAGS(tc)		(tc)->xtc_flags
#define TCptv_MATCH		0x00000001
#define TCptv_FORWARD		0x00000002
#define TCptv_START		0x00000004
#define TCptv_END		0x00000008
#endif

#define TcMATCH(tc)		(TcFLAGS(tc) & TCptv_MATCH)
#define TcMATCH_on(tc)		(TcFLAGS(tc) |= TCptv_MATCH, \
				 TcFLAGS(tc) &= ~(TCptv_START|TCptv_END))
#define TcMATCH_off(tc)		(TcFLAGS(tc) &= ~TCptv_MATCH)
#define TcFORWARD(tc)		(TcFLAGS(tc) & TCptv_FORWARD)
#define TcFORWARD_on(tc)	(TcFLAGS(tc) |= TCptv_FORWARD)
#define TcFORWARD_off(tc)	(TcFLAGS(tc) &= ~TCptv_FORWARD)
#define TcSTART(tc)		(TcFLAGS(tc) & TCptv_START)
#define TcSTART_on(tc)		(TcFLAGS(tc) |= TCptv_START)
#define TcEND(tc)		(TcFLAGS(tc) & TCptv_END)
#define TcEND_on(tc)		(TcFLAGS(tc) |= TCptv_END)
#define TcSTARTEND_off(tc)	(TcFLAGS(tc) &= ~(TCptv_START|TCptv_END))

